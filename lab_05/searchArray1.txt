#include <iostream>#include <fstream>#include <string>using namespace std;int binarySearchR(string* Arr, int first, int last, string value) {	if first is greater than last{		return -1;	}	int middle = (first + last) / 2;	if ( Arr[middle] == value ) { // if we find the value at the 		return middle; // return middle index	} else if the middle value is smaller than desired value		return(); search again starting at the beginning of the right half of Arr	} else the middle value is greater than the desired value, so we look to the left half of Arr		return binarySearchR(Arr, first, middle-1, value);	}}int checkArraySort(string* array, int arr_size) {     check if increasing    for (int i = 1; i < arr_size; i++) {       get previous value   	get current indexed value        	 if this is true, then array could be decreasing or unsorted            break;        }        	 if we are at last index            	 this is an increasing array because each value is greater than previous one            	increasing array        }    }    	 check if decreasing    for (int i = 1; i < arr_size; i++) {       	get previous value       	get current indexed value        if this is true, then array could be increasing or unsorted            break;        }        if we are at last index             this is an decreasing array because each value is less than previous one 	decreasing array        }    }   	if we get to here, then the array is not sorted    return 0;}int main(){    ifstream file input    open file input.txt");    string line;    int count = 0;    if ( file is open ) {        while (!file_in.eof()) {            getline(file_in, line);            count++;        }    }    close file    string *arr = new string[count];file input open ("input.txt");    if ( file is open ) {        while ( !file_in.eof() ) {            for (int i = 0; i < count; i++) {            getline(file_in, arr[i]);            }        }    }    int result = checkArraySort(arr, count);    if (result != 1) {        cout << "The array is not sorted in ascending order!" << endl;        cout << " result is " << result << endl;        return 0;    }    cout << "Input a search value: " << endl;    string searchVal;    cin >> searchVal;    int idxFound = binarySearchR(arr, 0, count-1, searchVal);    if (idxFound == -1) {    	cout << "Value of " << "\"" << searchVal << "\" not found in the array." << endl;    	return 0;    }    cout << "Found \"" << searchVal << "\" at index " << idxFound << " of the array." << endl;return 0;}